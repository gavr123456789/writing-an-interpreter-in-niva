type Lexer
  input: String
  pos: Int
  readPos: Int
  ch: Char

constructor Lexer input::String = [
  l = Lexer input: input pos: 0 readPos: 0 ch: 'ÑŠ'
  l readChar 
  ^l 
] 

Lexer readChar = [
  readPos >= input count => 
    ch <- '\u0000' |=>  
    ch <- input at: readPos
    
  // > ch TODO inline repl bug
  pos <- readPos
  readPos <- readPos inc
]


Lexer nextToken -> Token = [
  .skipWhiteSpaces
  tok = | ch 
  | '=' => Token kind: TokenType.ASSIGN
  | ';' => Token kind: TokenType.SEMICOLON
  | '(' => Token kind: TokenType.LPAREN
  | ')' => Token kind: TokenType.RPAREN
  | ',' => Token kind: TokenType.COMMA
  | '+' => Token kind: TokenType.PLUS
  | '{' => Token kind: TokenType.LBRACE
  | '}' => Token kind: TokenType.RBRACE
  | '\u0000' => Token kind: TokenType.EOF
  
  |=> [
    ch isLetter || (ch == '_') => [
      lit = this readIdentifier
      ^Token lit: lit kind: (Token lookupIdent: lit) // early exit because we dont need another readchar from line 54
    ] |=>  
    ch isDigit => [
      lit = this readNumber
      ^ Token lit: lit kind: TokenType.INT
    ] |=> 
    Token kind: TokenType.ILLEGAL
  ]

  .readChar
  ^ tok
]


Lexer readIdentifier -> String = [
  localPos = pos
  [ch isLetter] whileTrue: [
    .readChar
  ]
  result = input slice: localPos..<pos
//> ten
  >result
  ^result
]

Lexer readNumber -> String = [
  localPos = pos 
  [ch isDigit] whileTrue: [
    .readChar
  ]

  result = input slice: localPos..<pos
//> 10
  >result
  ^result
]

Lexer skipWhiteSpaces = [
  [(ch == ' ') || (ch == '\t') || (ch == '\n') || (ch == '\r')] whileTrue: [
    .readChar
  ]
 
]
